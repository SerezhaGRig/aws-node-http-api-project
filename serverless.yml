org: serezha
app: http-app
service: aws-node-http-api-project
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  region: us-east-2
  stage: ${self:custom.currentStage}
  logRetentionInDays: 30
  environment:
    THE_QUEUE_URL: { Ref: WorkerQueue }
    SUPERTOPIC_ARN: { Ref: SuperTopic }
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "*"

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}



resources:
  Resources:
    Cars:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Carsnor
        AttributeDefinitions:
          - AttributeName: login
            AttributeType: S
          - AttributeName: car_id
            AttributeType: S
        KeySchema:
          - AttributeName: login
            KeyType: HASH
          - AttributeName: car_id
            KeyType: RANGE

    Models:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Modelsnor
        AttributeDefinitions:
          - AttributeName: Brand
            AttributeType: S
          - AttributeName: Model
            AttributeType: S
        KeySchema:
          - AttributeName: Brand
            KeyType: HASH
          - AttributeName: Model
            KeyType: RANGE

    Users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Usersnor
        AttributeDefinitions:
          - AttributeName: login
            AttributeType: S
        KeySchema:
          - AttributeName: login
            KeyType: HASH

    Brands:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Brandsnor
        AttributeDefinitions:
          - AttributeName: brand
            AttributeType: S
        KeySchema:
          - AttributeName: brand
            KeyType: HASH

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ CognitoUserPool, Arn ]

    SuperTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: SuperTopic

    WorkerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: WorkerQueue
        FifoQueue: True
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - DeadLetterQueue
              - Arn
          maxReceiveCount: 5

    DeadLetterQueue:
      Type: AWS::SQS::Queue


    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}


functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  compute:
    handler: handler.compute
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - WorkerQueue
              - Arn

  computeResultHandler:
    handler: handler.computeResultHandler
    events:
      - sns:
          arn:
            Fn::GetAtt:
              - SuperTopic
              - Arn
          topicName: SuperTopic

  pushComputation:
    handler: handler.pus
    events:
      - http:
          path: /compute
          method: post




  addCar:
    handler: handler.addCar
    events:
      - http:
          path: /addCar
          method: post

  getUserCars:
    handler: handler.getUserCars
    events:
      - http:
          path: /getUserCars
          method: post

  getModelsByBrand:
    handler: handler.getModelsByBrand
    events:
      - http:
          path: /getModelsByBrand
          method: post

  getBrands:
    handler: handler.getBrands
    events:
      - http:
          path: /getBrands
          method: get

  updateCar:
    handler: handler.updateCar
    events:
      - http:
          path: /updateCar
          method: post
  getCarById:
    handler: handler.getCarById
    events:
      - http:
          path: /getCarById
          method: post
plugins:
  - serverless-webpack
  - serverless-offline

