org: serezha
app: http-app
service: aws-node-http-api-pr
frameworkVersion: '1.83.3'

plugins:
  - serverless-webpack
  - serverless-apigateway-service-proxy


provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  region: us-east-2
  stage: ${self:custom.currentStage}
  logRetentionInDays: 30
  environment:
    THE_QUEUE_URL: { Ref: SQSQueue }
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "*"

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}
  apiGatewayServiceProxies:
    - sqs:
        path: /addCar
        method: post
        queueName: { 'Fn::GetAtt': [ 'SQSQueue', 'QueueName' ] }
        cors: true





resources:
  Resources:
    Cars:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Cars
        AttributeDefinitions:
          - AttributeName: login
            AttributeType: S
          - AttributeName: car_id
            AttributeType: S
        KeySchema:
          - AttributeName: login
            KeyType: HASH
          - AttributeName: car_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    Models:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Models
        AttributeDefinitions:
          - AttributeName: Brand
            AttributeType: S
          - AttributeName: Model
            AttributeType: S
        KeySchema:
          - AttributeName: Brand
            KeyType: HASH
          - AttributeName: Model
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    Users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: login
            AttributeType: S
        KeySchema:
          - AttributeName: login
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    Brands:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Brands
        AttributeDefinitions:
          - AttributeName: brand
            AttributeType: S
        KeySchema:
          - AttributeName: brand
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ CognitoUserPool, Arn ]


    DeadMessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: DeadMessageQueue
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyQueue
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - DeadMessageQueue
              - Arn
          maxReceiveCount: 5





functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


  addCar:
    handler: handler.addCar
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

  getUserCars:
    handler: handler.getUserCars
    events:
      - http:
          path: /getUserCars
          method: post

  getModelsByBrand:
    handler: handler.getModelsByBrand
    events:
      - http:
          path: /getModelsByBrand
          method: post

  getBrands:
    handler: handler.getBrands
    events:
      - http:
          path: /getBrands
          method: get

  updateCar:
    handler: handler.updateCar
    events:
      - http:
          path: /updateCar
          method: post
  getCarById:
    handler: handler.getCarById
    events:
      - http:
          path: /getCarById
          method: post

